<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>树状数组</title>
    <url>/2025/09/17/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="树状数组">树状数组</h2>
<h3 id="单点修改维护区间和">单点修改维护区间和</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], t[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> z&amp;-z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> z)</span><span class="comment">// 单点修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=p;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))  t[i] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">// 区间查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res1 += t[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))		res2 += t[i];</span><br><span class="line">    <span class="keyword">return</span> res2-res1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间修改维护区间和">区间修改维护区间和</h3>
<p>维护差分 <em>其实没啥用了, 我会线段树</em> <span
class="math inline">$\sum_{i=1}^n a_i = \sum_{i=1}^n
\overbrace{(n+1)d_i}^{t_1} -
\sum_{i=1}^n\overbrace{id_i}^{t_2}$</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> t[N],ti[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] += z, ti[i] += l*z;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">+1</span>;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] -= z, ti[i] -= (r<span class="number">+1</span>)*z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res -= (l)*t[i] - ti[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))		res += (r<span class="number">+1</span>)*t[i] - ti[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="维护逆序对">维护逆序对</h3>
<p>按出现顺序依次加入树状数组，每次可得当前小于（大于）等于自己的数目（也就是前面比自己小/大的数目），计算即可得逆序对。
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(N)</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; dis,</span>;<span class="comment">// dis离散化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 寻找离散化下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lower_bound</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>(),x)-dis.<span class="built_in">begin</span>()<span class="number">+1</span>;</span><br><span class="line">	<span class="comment">// 下标存入树状数组，保证下标从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> z&amp;-z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=p;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=p;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res += t[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)	cin &gt;&gt; a[i];</span><br><span class="line">	dis = a;</span><br><span class="line">	<span class="built_in">sort</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>());</span><br><span class="line">	dis.<span class="built_in">erase</span>(<span class="built_in">unique</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>()),dis.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ans += i-<span class="built_in">query</span>(<span class="built_in">get</span>(a[i]));</span><br><span class="line">		<span class="built_in">update</span>(<span class="built_in">get</span>(a[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>树状数组</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
