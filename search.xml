<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线段树</title>
    <url>/2025/09/17/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<h2 id="线段树">线段树</h2>
<h3 id="模板">模板</h3>
<h4 id="区间修改线段树">区间修改线段树</h4>
<h5 id="区间和">区间和</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],t[N&lt;&lt;<span class="number">2</span>],lz[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 更新节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> z,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] += (ed-be<span class="number">+1</span>) * z;</span><br><span class="line">	lz[p] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = t[p&lt;&lt;<span class="number">1</span>] + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放lazy_tag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(lz[p],be,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">update</span>(lz[p],mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	lz[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> z,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(z,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,z,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,z,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p];</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="区间rmq">区间RMQ</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],t[N&lt;&lt;<span class="number">2</span>],lz[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 更新节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> z,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] += z;</span><br><span class="line">	lz[p] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = <span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>],t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放lazy_tag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(lz[p],be,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">update</span>(lz[p],mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	lz[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> z,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(z,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,z,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,z,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p];</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res = <span class="built_in">max</span>(res,<span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res = <span class="built_in">max</span>(res,<span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单点修改线段树">单点修改线段树</h4>
<p>单点修改不再需要lazy_tag <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],t[N&lt;&lt;<span class="number">2</span>],lz[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 更新节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> z,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] += (ed-be<span class="number">+1</span>) * z;</span><br><span class="line">	lz[p] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = t[p&lt;&lt;<span class="number">1</span>] + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放lazy_tag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(lz[p],be,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">update</span>(lz[p],mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	lz[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> z,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(z,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,z,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,z,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p];</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 权值线段树
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = t[p&lt;&lt;<span class="number">1</span>] + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单点修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> v,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] += v;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(k &lt;= mid)	<span class="built_in">put</span>(k,v,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span>	<span class="built_in">put</span>(k,v,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询[l,r]内共有多少个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_cnt</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p];</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>,cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	cnt += <span class="built_in">query_cnt</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	cnt += <span class="built_in">query_cnt</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询第 k 个数的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_k</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)	<span class="keyword">return</span> be;</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>, lsum = t[p&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(lsum &gt;= k)	<span class="keyword">return</span> <span class="built_in">query_k</span>(k,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query_k</span>(k-lsum,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="多种-lazy_tag">多种 lazy_tag</h3>
<h4 id="乘法tag-和-加法tag">乘法tag 和 加法tag</h4>
<p><span
class="math inline">∑<em>x</em><em>a</em><sub><em>i</em></sub> + <em>b</em> = <em>x</em>∑<em>a</em><sub><em>i</em></sub> + <em>l</em><em>e</em><em>n</em> × <em>b</em></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> sum,mul,add;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// 更新节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> mul,<span class="type">int</span> add,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sum = t[p].sum*mul + (ed-be<span class="number">+1</span>) * add;</span><br><span class="line">	t[p].mul *= mul, t[p].add = t[p].add*mul+add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sum = t[p&lt;&lt;<span class="number">1</span>].sum + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放lazy_tag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(t[p].mul,t[p].add,be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">update</span>(t[p].mul,t[p].add,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	t[p].mul = <span class="number">1</span>, t[p].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p].sum = a[be];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> add,<span class="type">int</span> mul,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(mul,add,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,add,mul,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,add,mul,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p].sum;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>,res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 各种区间操作 #### 加上等差数列
方案很多，如果只需要单点信息，则可以只维护差分，这里只用一棵线段树维护。</p>
<p>一次增加操作被断开，视为两次增减操作即可。 - <span
class="math inline">[<em>l</em>, <em>x</em>]</span> 区间，<span
class="math inline"><em>k</em> + <em>i</em> × <em>d</em></span> - <span
class="math inline">[<em>x</em> + 1, <em>r</em>]</span> 区间，<span
class="math inline"><em>k</em> + <em>i</em> × (<em>x</em> + 1 − <em>l</em>) + <em>i</em> × <em>d</em></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="type">int</span> sum,k,d;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> d,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> len = ed-be<span class="number">+1</span>;</span><br><span class="line">	t[p].sum += len*k + len*(len<span class="number">-1</span>)/<span class="number">2</span>*d;</span><br><span class="line">	t[p].k += k, t[p].d += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sum = t[p&lt;&lt;<span class="number">1</span>].sum + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(t[p].k,t[p].d,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">update</span>(t[p].k+t[p].d*(mid<span class="number">+1</span>-be),t[p].d,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	t[p].k = t[p].d = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p].sum = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> d,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(k+(be-l)*d,d,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,k,d,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,k,d,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p].sum;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">put</span>(l,r,k,d);<span class="comment">// 给 l,r 加上以 k 为初始值, 方差为 d 的等差数列</span></span><br><span class="line"><span class="built_in">query</span>(l,r);<span class="comment">// l,r 区间和</span></span><br></pre></td></tr></table></figure></p>
<h3 id="各种区间信息">各种区间信息</h3>
<h4 id="区间平方和">区间平方和</h4>
<p><span
class="math inline">∑(<em>x</em><em>a</em><sub><em>i</em></sub> + <em>y</em>) = <em>x</em><sup>2</sup>∑<em>a</em><sub><em>i</em></sub><sup>2</sup> + 2<em>x</em><em>y</em>∑<em>a</em><sub><em>i</em></sub> + <em>l</em><em>e</em><em>n</em> × <em>y</em><sup>2</sup></span></p>
<p>需要维护区间和 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 区间和, 平方和, 加lz，乘lz</span></span><br><span class="line">	<span class="type">int</span> sum,sq,add,mul;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// 更新节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> mul,<span class="type">int</span> add,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sq = t[p].sq*mul*mul + t[p].sum*add*<span class="number">2</span> + (ed-be<span class="number">+1</span>)*add*add;</span><br><span class="line">	t[p].sum = t[p].sum*mul + (ed-be<span class="number">+1</span>) * add;</span><br><span class="line">	t[p].mul *= mul, t[p].add = t[p].add*mul+add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sum = t[p&lt;&lt;<span class="number">1</span>].sum + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">	t[p].sq = t[p&lt;&lt;<span class="number">1</span>].sq + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放lazy_tag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(t[p].mul,t[p].add,be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">update</span>(t[p].mul,t[p].add,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	t[p].mul = <span class="number">1</span>, t[p].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = &#123;a[be],a[be]*a[be],<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> add,<span class="type">int</span> mul,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(mul,add,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,add,mul,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,add,mul,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p].sq;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>,res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间乘</span></span><br><span class="line"><span class="built_in">put</span>(l,r,<span class="number">0</span>,x);</span><br><span class="line"><span class="comment">// 区间加</span></span><br><span class="line"><span class="built_in">put</span>(l,r,x,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="区间乘积和">区间乘积和</h4>
<p>求区间 <span class="math inline"><em>l</em></span> 到 <span
class="math inline"><em>r</em></span>
之间两两之间数字的乘积和(例如：<span
class="math inline">2, 3, 4, 5</span>两两之间乘积和为 <span
class="math inline">2 × 3 + 2 × 4 + 2 × 5 + 3 × 4 + 3 × 5 + 4 × 5</span>)</p>
<p><span
class="math inline">∑∑(<em>x</em><em>a</em><sub><em>i</em></sub> + <em>y</em>) × (<em>x</em><em>a</em><sub><em>j</em></sub> + <em>y</em>)</span>
<span
class="math inline"> = <em>x</em><sup>2</sup>∑∑<em>a</em><sub><em>i</em></sub><em>a</em><sub><em>j</em></sub> + <em>x</em><em>y</em>(<em>l</em><em>e</em><em>n</em> − 1)∑<em>a</em><sub><em>i</em></sub> + <em>l</em><em>e</em><em>n</em>(<em>l</em><em>e</em><em>n</em> − 1)<em>y</em><sup>2</sup>/2</span></p>
<p>需要维护区间和 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 区间和，区间乘积和，乘法lz，加法lz</span></span><br><span class="line">	<span class="type">int</span> sum,ab,mul,add;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,P;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> mul,<span class="type">int</span> add,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> L = ed-be<span class="number">+1</span>;</span><br><span class="line">	<span class="comment">// 切记先算乘积和，因为其依托于区间和</span></span><br><span class="line">	t[p].ab = ((t[p].ab*mul*mul + (L<span class="number">-1</span>)*mul*add*t[p].sum) + L*(L<span class="number">-1</span>)/<span class="number">2</span>*add*add);</span><br><span class="line">	t[p].sum = (t[p].sum*mul + L*add);</span><br><span class="line">	t[p].mul = t[p].mul*mul;</span><br><span class="line">	t[p].add = (t[p].add*mul + add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p].sum = (t[p&lt;&lt;<span class="number">1</span>].sum + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">	t[p].ab = ((t[p&lt;&lt;<span class="number">1</span>].ab + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ab) + t[p&lt;&lt;<span class="number">1</span>].sum*t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下放懒标记</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t[p].mul == <span class="number">1</span> &amp;&amp; t[p].add == <span class="number">0</span>)	<span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(t[p].mul,t[p].add,be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">update</span>(t[p].mul,t[p].add,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	t[p].mul = <span class="number">1</span>,t[p].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = &#123;a[be],<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p].sum = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>), <span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> mul,<span class="type">int</span> add,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(mul,add,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,mul,add,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,mul,add,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="function">PII <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> &#123;t[p].sum,t[p].ab&#125;;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	PII res = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)</span><br><span class="line">	&#123;</span><br><span class="line">		res = <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)</span><br><span class="line">		&#123;</span><br><span class="line">			PII tmp = <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">			res.Y = (res.Y+tmp.Y) + res.X*tmp.X;</span><br><span class="line">			res.X = res.X+tmp.X;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res = <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">put</span>(l,r,<span class="number">1</span>,v);<span class="comment">// 区间加</span></span><br><span class="line"><span class="built_in">put</span>(l,r,v,<span class="number">0</span>);<span class="comment">// 区间乘</span></span><br></pre></td></tr></table></figure></p>
<h3 id="区间信息性质">区间信息性质</h3>
<h4 id="开方性质">开方性质</h4>
<p>一个 <span class="math inline"> ≤ 10<sup>9</sup></span>
的数，最多<strong>五次</strong>开方到 <span class="math inline">1</span>
&gt; 就是 <span class="math inline"> ≤ 10<sup>18</sup></span>
的数，也只需要 <strong>六次</strong></p>
<p><strong>题面:</strong> 第一行一个整数 <span
class="math inline"><em>n</em></span>，代表数列中数的个数。</p>
<p>第二行 <span class="math inline"><em>n</em></span>
个正整数，表示初始状态下数列中的数。</p>
<p>第三行一个整数 <span class="math inline"><em>m</em></span>，表示有
<span class="math inline"><em>m</em></span> 次操作。</p>
<p>接下来 <span class="math inline"><em>m</em></span> 行每行三个整数
<code>k l r</code>。</p>
<ul>
<li><span class="math inline"><em>k</em> = 0</span> 表示给 <span
class="math inline">[<em>l</em>, <em>r</em>]</span>
中的每个数开平方（下取整）。</li>
<li><span class="math inline"><em>k</em> = 1</span> 表示询问 <span
class="math inline">[<em>l</em>, <em>r</em>]</span> 中各个数的和。</li>
</ul>
<p><strong>思路:</strong> 一个 <span class="math inline">≥</span> 的数,
最多 <span class="math inline">5</span> 次开方变成 <span
class="math inline">1</span>, 所以最多对所有数 <span
class="math inline">5</span> 次单点修改.
那么只需要维护<strong>单点修改</strong>和<strong>区间查询</strong>.
并且维护区间最值, 最大值为 <span class="math inline">1</span>,
则无需再修改. <strong>代码:</strong> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Start cin.tie(0), cout.tie(0), ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(N)</span>,<span class="title">t</span><span class="params">(N&lt;&lt;<span class="number">2</span>)</span>,<span class="title">tmx</span><span class="params">(N&lt;&lt;<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[p] = t[p&lt;&lt;<span class="number">1</span>] + t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">	tmx[p] = <span class="built_in">max</span>(tmx[p&lt;&lt;<span class="number">1</span>],tmx[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = a[be];</span><br><span class="line">		tmx[p] = a[be];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p] = <span class="built_in">sqrt</span>(t[p]);</span><br><span class="line">		tmx[p] = <span class="built_in">sqrt</span>(tmx[p]);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid &amp;&amp; tmx[p] &gt; <span class="number">1</span>)	<span class="built_in">put</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r &amp;&amp; tmx[p] &gt; <span class="number">1</span>)	<span class="built_in">put</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)	<span class="keyword">return</span> t[p];</span><br><span class="line">	<span class="type">int</span> mid = (be + ed) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res += <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res += <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Start;</span><br><span class="line">	<span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">	<span class="keyword">while</span>(_--)	<span class="built_in">func</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)	cin &gt;&gt; a[i];</span><br><span class="line">	<span class="built_in">build_tree</span>();</span><br><span class="line">	cin &gt;&gt; m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">bool</span> op;	cin &gt;&gt; op;</span><br><span class="line">		<span class="type">int</span> l,r;	cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		<span class="keyword">if</span>(l &gt; r)	<span class="built_in">swap</span>(l,r);</span><br><span class="line">		<span class="keyword">if</span>(op)	cout &lt;&lt; <span class="built_in">query</span>(l,r) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span>	<span class="built_in">put</span>(l,r);<span class="comment">// 一次结束当然比循环一次要快了</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="开多棵线段树">开多棵线段树</h3>
<p><strong>此处是bitset优化</strong> <strong>题面:</strong> 色板长度为
<span class="math inline"><em>L</em></span>，<span
class="math inline"><em>L</em></span>
是一个正整数，所以我们可以均匀地将它划分成 <span
class="math inline"><em>L</em></span> 块 <span
class="math inline">1</span> 厘米长的小方格。并从左到右标记为 <span
class="math inline">1, 2, …<em>L</em></span>。</p>
<p>现在色板上只有一个颜色，老师告诉阿宝在色板上只能做两件事：</p>
<ol type="1">
<li><code>C A B C</code> 指在 <span
class="math inline"><em>A</em></span> 到 <span
class="math inline"><em>B</em></span> 号方格中涂上颜色 <span
class="math inline"><em>C</em></span>。</li>
<li><code>P A B</code> 指老师的提问：<span
class="math inline"><em>A</em></span> 到 <span
class="math inline"><em>B</em></span> 号方格中有几种颜色。</li>
</ol>
<p>学校的颜料盒中一共有 <span class="math inline"><em>T</em></span>
种颜料。为简便起见，我们把他们标记为 <span
class="math inline">1, 2, …<em>T</em></span>. 开始时色板上原有的颜色就为
<span class="math inline">1</span> 号色。
面对如此复杂的问题，阿宝向你求助，你能帮助他吗？</p>
<p><strong>输入格式:</strong> 第一行有3个整数 <span
class="math inline"><em>L</em>(1 ≤ <em>L</em> ≤ 10<sup>5</sup>), <em>T</em>(1 ≤ <em>T</em> ≤ 30)<em>和</em><em>O</em>(1 ≤ <em>O</em> ≤ 10<sup>5</sup>)</span>。
在这里 <span class="math inline"><em>O</em></span> 表示事件数。</p>
<p>接下来 <span class="math inline"><em>O</em></span> 行, 每行以
<code>C A B C</code> 或 <code>P A B</code> 得形式表示所要做的事情（这里
<span class="math inline"><em>A</em>, <em>B</em>, <em>C</em></span>
为整数, 可能 <span
class="math inline"><em>A</em> &gt; <em>B</em></span>，这样的话需要你交换
<span class="math inline"><em>A</em></span> 和 <span
class="math inline"><em>B</em></span>）。 <strong>输出格式:</strong>
对于老师的提问，做出相应的回答。每行一个整数。</p>
<p><strong>代码:</strong> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Start cin.tie(0), cout.tie(0), ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k,q;</span><br><span class="line">vector&lt;bitset&lt;1000&gt;&gt; <span class="built_in">t</span>(N&lt;&lt;<span class="number">2</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lz</span><span class="params">(N&lt;&lt;<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="comment">// vector&lt;vector&lt;bool&gt;&gt; t(40,vector&lt;bool&gt;(N&lt;&lt;2));</span></span><br><span class="line"><span class="comment">// vector&lt;int&gt; lz(N&lt;&lt;2);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> col,<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; col &lt;&lt; &#x27; &#x27; &lt;&lt; be &lt;&lt; &#x27; &#x27; &lt;&lt; ed &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">	t[p].<span class="built_in">reset</span>();	t[p].<span class="built_in">set</span>(col);</span><br><span class="line">	lz[p] = col;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> lp = p&lt;&lt;<span class="number">1</span>, rp = p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[p] = t[p&lt;&lt;<span class="number">1</span>] | t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> be,<span class="type">int</span> ed,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(lz[p] == <span class="number">0</span>)	<span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">update</span>(lz[p],be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">update</span>(lz[p],mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	lz[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(be == ed)</span><br><span class="line">	&#123;</span><br><span class="line">		t[p].<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build_tree</span>(be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">build_tree</span>(mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> col,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(col,be,ed,p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	<span class="built_in">put</span>(l,r,col,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	<span class="built_in">put</span>(l,r,col,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">	<span class="comment">// cout &lt;&lt; t[col][p] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bitset&lt;1000&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> be=<span class="number">1</span>,<span class="type">int</span> ed=n,<span class="type">int</span> p=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bitset&lt;1000&gt; res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= be &amp;&amp; ed &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> t[p];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(be,ed,p);</span><br><span class="line">	<span class="type">int</span> mid = (be+ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)	res |= <span class="built_in">query</span>(l,r,be,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(mid<span class="number">+1</span> &lt;= r)	res |= <span class="built_in">query</span>(l,r,mid<span class="number">+1</span>,ed,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Start;</span><br><span class="line">	<span class="type">int</span> _  = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(_--)	<span class="built_in">func</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k &gt;&gt; q;</span><br><span class="line">	<span class="built_in">build_tree</span>();</span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op;</span><br><span class="line">		<span class="type">int</span> l,r;</span><br><span class="line">		cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		<span class="keyword">if</span>(l &gt; r)	<span class="built_in">swap</span>(l,r);</span><br><span class="line">		<span class="keyword">if</span>(op == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> col;	cin &gt;&gt; col;</span><br><span class="line">			<span class="built_in">put</span>(l,r,col);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">query</span>(l,r).<span class="built_in">count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">			<span class="comment">// cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/2025/09/17/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="树状数组">树状数组</h2>
<h3 id="单点修改维护区间和">单点修改维护区间和</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], t[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> z&amp;-z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> z)</span><span class="comment">// 单点修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=p;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))  t[i] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">// 区间查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res1 += t[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))		res2 += t[i];</span><br><span class="line">    <span class="keyword">return</span> res2-res1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间修改维护区间和">区间修改维护区间和</h3>
<p>维护差分 <em>其实没啥用了, 我会线段树</em> <span
class="math inline">$\sum_{i=1}^n a_i = \sum_{i=1}^n
\overbrace{(n+1)d_i}^{t_1} -
\sum_{i=1}^n\overbrace{id_i}^{t_2}$</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> t[N],ti[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] += z, ti[i] += l*z;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">+1</span>;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] -= z, ti[i] -= (r<span class="number">+1</span>)*z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res -= (l)*t[i] - ti[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))		res += (r<span class="number">+1</span>)*t[i] - ti[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="维护逆序对">维护逆序对</h3>
<p>按出现顺序依次加入树状数组，每次可得当前小于（大于）等于自己的数目（也就是前面比自己小/大的数目），计算即可得逆序对。
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(N)</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; dis,</span>;<span class="comment">// dis离散化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 寻找离散化下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lower_bound</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>(),x)-dis.<span class="built_in">begin</span>()<span class="number">+1</span>;</span><br><span class="line">	<span class="comment">// 下标存入树状数组，保证下标从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> z&amp;-z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=p;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))	t[i] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=p;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))	res += t[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)	cin &gt;&gt; a[i];</span><br><span class="line">	dis = a;</span><br><span class="line">	<span class="built_in">sort</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>());</span><br><span class="line">	dis.<span class="built_in">erase</span>(<span class="built_in">unique</span>(dis.<span class="built_in">begin</span>(),dis.<span class="built_in">end</span>()),dis.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ans += i-<span class="built_in">query</span>(<span class="built_in">get</span>(a[i]));</span><br><span class="line">		<span class="built_in">update</span>(<span class="built_in">get</span>(a[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>树状数组</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
